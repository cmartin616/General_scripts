import time
import datetime
import xml.etree.ElementTree as ET
import re
import os

def fgdc_meta():
	# XML Template for FGDC metadata

	''' build element tree '''

	root = ET.Element('metadata')
	idinfo = ET.SubElement(root, 'idinfo')
	citation = ET.SubElement(idinfo, 'citation')
	citeinfo = ET.SubElement(citation, 'citeinfo')

	origin = ET.SubElement(citeinfo, 'origin')
	origin.text = originT

	pubdate = ET.SubElement(citeinfo, 'pubdate')
	pubdate.text = publicationDateT

	title = ET.SubElement(citeinfo, 'title')
	title.text = titleT

	mgmglcid = ET.SubElement(citeinfo, 'mgmglcid')
	pubinfo = ET.SubElement(citeinfo, 'pubinfo')

	publish = ET.SubElement(pubinfo, 'publish')
	publish.text = publisherT

	onlink = ET.SubElement(citeinfo, 'onlink')
	onlink.text = downloadLinkT

	descript = ET.SubElement(idinfo, 'descript')

	abstract = ET.SubElement(descript, 'abstract')
	abstract.text = abstractT

	purpose = ET.SubElement(descript, 'purpose')
	purpose.text = purposeT

	supplinf = ET.SubElement(descript, 'supplinf')
	supplinf.text = spatialExtT

	timeperd = ET.SubElement(idinfo, 'timeperd')
	timeinfo = ET.SubElement(timeperd, 'timeinfo')
	sngdate = ET.SubElement(timeinfo, 'sngdate')

	caldate = ET.SubElement(sngdate, 'caldate')
	caldate.text = timePeriodOfContentT

	current = ET.SubElement(timeperd, 'current')
	current.text = currentnessReferenceT

	status = ET.SubElement(idinfo, 'status')
	progress = ET.SubElement(status, 'progress')
	update = ET.SubElement(status, 'update')
	spdom = ET.SubElement(idinfo, 'spdom')
	bounding = ET.SubElement(spdom, 'bounding')

	westbc = ET.SubElement(bounding, 'westbc')
	westbc.text = westBoundingCoordinateT

	eastbc = ET.SubElement(bounding, 'eastbc')
	eastbc.text = eastBoundingCoordinateT

	northbc = ET.SubElement(bounding, 'northbc')
	northbc.text = northBoundingCoordinateT

	southbc = ET.SubElement(bounding, 'south')
	southbc.text = southBoundingCoordinateT

	keywords = ET.SubElement(idinfo, 'keywords')
	theme = ET.SubElement(keywords, 'theme')
	themekt = ET.SubElement(theme, 'themekt')

	themekey = ET.SubElement(theme, 'themekey')
	themekey.text = themeKeywords

	place = ET.SubElement(keywords, 'place')

	placekey = ET.SubElement(place, 'placekey')
	placekey.text = placeKeywords

	accconst = ET.SubElement(idinfo, 'accconst')
	accconst.text = accessConstraintT

	useconst = ET.SubElement(idinfo, 'useconst')
	ptcontac = ET.SubElement(idinfo, 'ptcontac')
	cntinfo = ET.SubElement(ptcontac, 'cntinfo')
	cntperp = ET.SubElement(cntinfo, 'cntperp')
	cntper = ET.SubElement(cntperp, 'cntper')

	cntorg = ET.SubElement(cntperp, 'cntorg')
	cntorg.text = contactOrgT

	cntpos = ET.SubElement(cntinfo, 'cntpos')
	cntaddr = ET.SubElement(cntinfo, 'cntaddr')

	addrtype = ET.SubElement(cntaddr, 'addrtype')
	addrtype.text = 'mailing and physical address'

	address = ET.SubElement(cntaddr, 'address')
	address.text = contactAddT

	city = ET.SubElement(cntaddr, 'city')
	state = ET.SubElement(cntaddr, 'state')
	postal = ET.SubElement(cntaddr, 'postal')

	cntvoice = ET.SubElement(cntinfo, 'cntvoice')
	cntvoice.text = contactVoiceT

	cntfax = ET.SubElement(cntinfo, 'cntfax')

	cntemail = ET.SubElement(cntaddr, 'cntemail')
	cntemail.text = contactEmailT

	browse = ET.SubElement(idinfo, 'browse')
	browsen = ET.SubElement(browse, 'browsen')
	browsed = ET.SubElement(browse, 'browsed')
	native = ET.SubElement(idinfo, 'native')
	crossref = ET.SubElement(idinfo, 'crossref')
	citeinfo = ET.SubElement(crossref, 'citeinfo')

	title = ET.SubElement(crossref, 'title')
	title.text = titleT

	dataqual = ET.SubElement(root, 'dataqual')
	attracc = ET.SubElement(dataqual, 'attracc')

	attraccr = ET.SubElement(attracc, 'attraccr')
	attraccr.text = attributeAccuracyT

	logic = ET.SubElement(dataqual, 'logic')
	complete = ET.SubElement(dataqual, 'complete')
	posacc = ET.SubElement(dataqual, 'posacc')
	horizpa = ET.SubElement(posacc, 'horizpa')

	horizpar = ET.SubElement(horizpa, 'horizpar')
	horizpar.text = horizontalPositionalAccuracyT

	vertacc = ET.SubElement(posacc, 'vertacc')

	vertaccr = ET.SubElement(vertacc, 'vertaccr')
	vertaccr.text = verticalPositionalAccuracyT

	lineage = ET.SubElement(dataqual, 'lineage')
	lineage.text = lineageT

	srcinfo = ET.SubElement(lineage, 'srcinfo')

	srcscale = ET.SubElement(srcinfo, 'srcscale')
	srcscale.text = sourceScaleDenominatorT

	procstep = ET.SubElement(lineage, 'procstep')
	procdesc = ET.SubElement(procstep, 'procdesc')
	spdoinfo = ET.SubElement(root, 'spdoinfo')
	indspref = ET.SubElement(spdoinfo, 'indspref')
	direct = ET.SubElement(spdoinfo, 'direct')
	mgmg3obj = ET.SubElement(spdoinfo, 'mgmg3obj')
	mgmg3til = ET.SubElement(spdoinfo, 'mgmg3til')
	spref = ET.SubElement(root, 'spref')
	horizsys = ET.SubElement(spref, 'horizsys')
	geograph = ET.SubElement(horizsys, 'geograph')
	latres = ET.SubElement(geograph, 'latres')
	longres = ET.SubElement(geograph, 'longres')
	geogunit = ET.SubElement(geograph, 'geogunit')
	planar = ET.SubElement(horizsys, 'planar')
	mapproj = ET.SubElement(planar, 'mapproj')

	mapprojn = ET.SubElement(mapproj, 'mapprojn')
	mapprojn.text = mapProjectionNameT

	mgmg4par = ET.SubElement(mapproj, 'mgmg4par')
	otherprj = ET.SubElement(mapproj, 'otherprj')
	gridsys = ET.SubElement(planar, 'gridsys')
	gridsysn = ET.SubElement(gridsys, 'gridsysn')
	utm = ET.SubElement(gridsys, 'utm')

	utmzone = ET.SubElement(utm, 'utmzone')
	utmzone.text = UTMzoneNumberT

	spcs = ET.SubElement(gridsys, 'spcs')
	spcszone = ET.SubElement(spcs, 'spcszone')
	mgmg4coz = ET.SubElement(gridsys, 'mgmg4coz')
	mgmg4adj = ET.SubElement(gridsys, 'mgmg4adj')
	planci = ET.SubElement(planar, 'planci')
	coordrep = ET.SubElement(planci, 'coordrep')
	absres = ET.SubElement(coordrep, 'absres')
	ordres = ET.SubElement(coordrep, 'ordres')
	distbrep = ET.SubElement(planci, 'distbrep')
	distres = ET.SubElement(distbrep, 'distres')

	plandu = ET.SubElement(planci, 'plandu')
	plandu.text = mapUnitsT

	geodetic = ET.SubElement(horizsys, 'geodetic')
	horizdn = ET.SubElement(geodetic, 'horizdn')
	ellips = ET.SubElement(geodetic, 'ellips')
	vertdef = ET.SubElement(spref, 'vertdef')
	altsys = ET.SubElement(vertdef, 'altsys')
	altdatum = ET.SubElement(altsys, 'altdatum')
	altunits = ET.SubElement(altsys, 'altunits')
	depthsys = ET.SubElement(vertdef, 'depthsys')
	depthdn = ET.SubElement(depthsys, 'depthdn')
	depthdu = ET.SubElement(depthsys, 'depthdu')
	eainfo = ET.SubElement(root, 'eainfo')
	overview = ET.SubElement(eainfo, 'overview')

	eaover = ET.SubElement(overview, 'eaover')
	eaover.text = entityAndAttributeOverviewT

	eadetcit = ET.SubElement(overview, 'eadetcit')
	distinfo = ET.SubElement(root, 'distinfo')
	distrib = ET.SubElement(distinfo, 'distrub')
	cntinfo = ET.SubElement(distrib, 'cntinfo')
	cntperp = ET.SubElement(distrib, 'cntperp1')
	cntper = ET.SubElement(cntperp, 'cntper')

	cntorg = ET.SubElement(cntperp, 'cntorg')
	cntorg.text = contactOrgT

	cntpos = ET.SubElement(cntinfo, 'cntpos')
	cntaddr = ET.SubElement(cntinfo, 'cntaddr')

	addrtype = ET.SubElement(cntaddr, 'addrtype')
	addrtype.text = 'mailing and physical address'

	address = ET.SubElement(cntaddr, 'address')
	address.text = contactAddT

	city = ET.SubElement(cntaddr, 'city')
	state = ET.SubElement(cntaddr, 'state')
	postal = ET.SubElement(cntaddr, 'postal')

	cntvoice = ET.SubElement(cntinfo, 'cntvoice')
	cntvoice.text = contactVoiceT

	cntfax = ET.SubElement(cntinfo, 'cntfax')

	cntemail = ET.SubElement(cntinfo, 'cntemail')
	cntemail.text = contactEmailT

	resdesc = ET.SubElement(distinfo, 'resdesc')
	distliab = ET.SubElement(distinfo, 'distliab')
	stdorder = ET.SubElement(distinfo, 'stdorder')
	digform = ET.SubElement(stdorder, 'digform')
	digtinfo = ET.SubElement(digform, 'digtinfo')
	formname = ET.SubElement(digtinfo, 'formname')
	formvern = ET.SubElement(digtinfo, 'formvern')
	transize = ET.SubElement(digtinfo, 'transize')
	ordering = ET.SubElement(stdorder, 'ordering')
	metainfo = ET.SubElement(root, 'metainfo')
	metd = ET.SubElement(metainfo, 'metd')
	metc = ET.SubElement(metainfo, 'metc')
	cntinfo = ET.SubElement(metc, 'cntinfo')
	cntperp = ET.SubElement(metc, 'cntperp')
	cntper = ET.SubElement(cntperp, 'cntper')

	cntorg = ET.SubElement(cntperp, 'cntorg')
	cntorg.text = contactOrgT

	cntpos = ET.SubElement(cntinfo, 'cntpos')
	cntaddr = ET.SubElement(cntinfo, 'cntaddr')

	addrtype = ET.SubElement(cntaddr, 'addrtype')
	addrtype.text = 'mailing and physical address'

	address = ET.SubElement(cntaddr, 'address')
	address.text = contactAddT

	city = ET.SubElement(cntaddr, 'city')
	state = ET.SubElement(cntaddr, 'state')
	postal = ET.SubElement(cntaddr, 'postal')

	cntvoice = ET.SubElement(cntinfo, 'cntvoice')
	cntvoice.text = contactVoiceT

	cntfax = ET.SubElement(cntinfo, 'cntfax')

	cntemail = ET.SubElement(cntinfo, 'cntemail')
	cntemail.text = contactEmailT

	metstdn = ET.SubElement(metainfo, 'metstdn')
	metstdn.text = metadataStandardNameT

	metstdv = ET.SubElement(metainfo, 'metstdv')
	metextns = ET.SubElement(metainfo, 'metextns')

	onlink = ET.SubElement(metextns, 'onlink')
	onlink.text = downloadLinkT

	esri = ET.SubElement(root, 'Esri')

	moddate = ET.SubElement(esri, 'ModDate')
	moddate.text = currentdateT

	modtime = ET.SubElement(esri, 'ModTime')
	modtime.text = currenttimeT

	mdDateSt = ET.SubElement(root, 'mdDateSt')
	mdDateSt.text = currentdateT
	mdDateSt.set('Sync', 'TRUE')

	''' Write tree '''
	tree = ET.ElementTree(root)
	tree.write(outPath)
	
def XMLvariables(message):
    # How to handle lists?
	answer = raw_input(message+': \n\
	Press I to import text from a *.txt file.\n\
	Press S to skip this entry for now.  We will revisit it at the end.\n')
	
	if answer.lower() in ['i']:
		pass
		while True:
			importPath = raw_input("Path to import text file.")
			if not os.path.isfile(importPath):
				print 'That is not a valid file.'
				continue

			else:		
				f = open(importPath, 'r')
				content = f.readlines
				print content
				break
				
			# validate/accept
			# exit/manual entry
	elif answer.lower() in ['s']:
		pass
	    #skip question
		#set skip variable
	elif answer.lower() in ['x']:
		exit()
		
	#retain old value?  constant value?
	return answer

projections = {32615:"UTM Zone 15N",
			  0:"Placeholder"
			  }
	
outPath = raw_input("Output path of XML \n")

abstractT = XMLvariables("Abstract")
accessConstraintT = XMLvariables("Access Constraints")
attributeAccuracyT = XMLvariables("Attribute Accuracy")
contactAddT = XMLvariables("Contact Address")
contactEmailT = XMLvariables("Contact Email")
contactOrgT = XMLvariables("Contact Organization")
contactVoiceT = XMLvariables("Contact Voice")
currentnessReferenceT = XMLvariables("Currentness Reference")
downloadLinkT = XMLvariables("Download Link")
entityAndAttributeOverviewT = XMLvariables("Entity and Attribute Overview")
horizontalPositionalAccuracyT = XMLvariables("Horizontal Positional Accuracy")
lineageT = XMLvariables("Lineage")
mapProjectionNameT = XMLvariables("Map Projection Name")
mapUnitsT = XMLvariables("Map Units")
originT = XMLvariables("Origin")
publicationDateT = XMLvariables("Publication Date")
publisherT = XMLvariables("Publisher")
purposeT = XMLvariables("Purpose")
spatialExtT = XMLvariables("Spatial Extent")
timePeriodOfContentT = XMLvariables("Time Period of Content")
titleT = XMLvariables("Title")
verticalPositionalAccuracyT = XMLvariables("Vertical Positional Accuracy")
eastBoundingCoordinateT = XMLvariables("East Bounding Coordinate")
westBoundingCoordinateT = XMLvariables("West Bounding Coordinate")
northBoundingCoordinateT = XMLvariables("North Bounding Coordinate")
southBoundingCoordinateT = XMLvariables("South Bounding Coordinate")
placeKeywordsT = XMLvariables("Place Keywords")
themeKeywordsT = XMLvariables("Theme Keywords")
sourceScaleDenominatorT = XMLvariables("Source Scale Denominator")

# date/time
today = datetime.date.today()
currenttimeT = str(time.strftime("%H:%M:%S"))
currentdateT = today.strftime("%Y/%m/%d")
#user?

format = raw_input('Which metadata standard do you want to create?')
print '  A) FGDC\n\
   B) ISO\n'

if format.lower() in ['a']:
	try:
		metadataStandardNameT = "FGDC"
		if mapProjectionNameT.lower() in ['utm zone 15n', '15n', 32615]:
			UTMzoneNumberT = XMLvariables("UTM Zone Number")
		metaOutput = fgdc_meta()
	except:
		print 'FGDC is not yet supported.  Sorry ://'
'''elif format.lower() in ['b']:
    try:
		metadataStandardNameT = "ISO"
		if mapProjectionNameT.lower() in ['utm zone 15n', '15n', 32615]:
			UTMzoneNumberT = XMLvariables("UTM Zone Number")
		metaOutput = iso_meta()
	except:
		print 'ISO is not yet supported.  Sorry ://'''
